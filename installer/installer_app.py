import re
import threading
import flet as ft
import paramiko
import os
from pathlib import Path

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
GIT_REPO_URL = "https://github.com/protototo/amnezia-portmaster.git"
REMOTE_PROJECT_DIR = "amnezia-portmaster"


# --- –õ–æ–≥–∏–∫–∞ ---
def is_path_critically_dangerous(path_str: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—É—Ç—å –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ (directory traversal, –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏).
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –ø—É—Ç—å –æ–ø–∞—Å–µ–Ω, –∏–Ω–∞—á–µ False.
    –≠—Ç–æ –Ω–µ –æ—á–∏—Å—Ç–∫–∞, —ç—Ç–æ –∂–µ—Å—Ç–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
    """
    if not isinstance(path_str, str) or not path_str.strip():
        return True  # –ü—É—Å—Ç–æ–π –ø—É—Ç—å –æ–ø–∞—Å–µ–Ω

    path = path_str.strip()

    # 1. –ó–∞–ø—Ä–µ—â–∞–µ–º –∞–±—Å–æ–ª—é—Ç–Ω—ã–µ –ø—É—Ç–∏
    if path.startswith('/'):
        return True

    # 2. –ó–∞–ø—Ä–µ—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if '..' in path.split('/'):
        return True

    # 3. –ó–∞–ø—Ä–µ—â–∞–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å —Å './' - —ç—Ç–æ –∏–∑–±—ã—Ç–æ—á–Ω–æ –∏ –º–æ–∂–µ—Ç –∑–∞–ø—É—Ç–∞—Ç—å
    if path.startswith('./'):
        return True

    # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤. –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ –ª—É—á—à–µ —á–µ—Ä–Ω–æ–≥–æ.
    # –†–∞–∑—Ä–µ—à–µ–Ω—ã: –±—É–∫–≤—ã (a-z, A-Z), —Ü–∏—Ñ—Ä—ã (0-9), —Ç–æ—á–∫–∞, –¥–µ—Ñ–∏—Å, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ.
    if not re.fullmatch(r'[a-zA-Z0-9_.-]+', path):
        return True

    # 5. –ò–º–µ–Ω–∞ "." –∏ ".." —Å–∞–º–∏ –ø–æ —Å–µ–±–µ —Ç–æ–∂–µ –∑–∞–ø—Ä–µ—â–µ–Ω—ã.
    if path in ['.', '..']:
        return True

    return False


def show_monkey_with_grenade_dialog(page: ft.Page, dangerous_path: str):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ñ–∞—Ç–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –≤—ã—Ö–æ–¥ - –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    """

    def close_dialog(e):
        dialog.open = False
        page.update()
        page.window.destroy()

    dialog = ft.AlertDialog(
        modal=True,
        title=ft.Container(
            content=ft.Row([
                ft.Text("üêíüí£", size=40),
                ft.Text(" –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!", size=20)
            ])
        ),
        content=ft.Container(
            content=ft.Text(
                f"–î–∞ –Ω—É –Ω–∞—Ö–µ—Ä...\n\n"
                f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –æ–ø–∞—Å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞: '{dangerous_path}'.\n\n"
                "–ü—ã—Ç–∞—Ç—å—Å—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã ‚Äî —ç—Ç–æ –∫–∞–∫ –¥–∞—Ç—å –æ–±–µ–∑—å—è–Ω–µ –≥—Ä–∞–Ω–∞—Ç—É. –ú—ã —Ç–∞–∫ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ–º.\n\n"
                "–ò—Å–ø—Ä–∞–≤—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É REMOTE_PROJECT_DIR –≤ –∫–æ–¥–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.",
                size=14,
                text_align=ft.TextAlign.CENTER,
            ),
            padding=ft.padding.all(20),
        ),
        actions=[
            ft.ElevatedButton(
                "–ü–æ–Ω—è–ª, –∏—Å–ø—Ä–∞–≤–ª—é—Å—å",
                on_click=close_dialog,
                color=ft.Colors.WHITE,
                bgcolor=ft.Colors.RED_700
            )
        ],
        actions_alignment=ft.MainAxisAlignment.END,
    )

    page.open(dialog)


# --- SSHClient –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±—ã–ª —Ö–æ—Ä–æ—à ---
class SecureSSHClient:
    """
    –ë–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∏ —á–∏—Å—Ç–∞—è –æ–±–µ—Ä—Ç–∫–∞ –Ω–∞–¥ Paramiko.
    –ù–µ —Ö—Ä–∞–Ω–∏—Ç –ø–∞—Ä–æ–ª—å –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —á–µ—Ç–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥.
    """

    def __init__(self):
        self.client = paramiko.SSHClient()
        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    def connect(self, hostname, port, username, password=None, key_filename=None):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É."""
        try:
            if key_filename:
                key_path = os.path.expanduser(key_filename)
                if not os.path.exists(key_path):
                    raise FileNotFoundError(f"–§–∞–π–ª –∫–ª—é—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {key_path}")
                try:
                    private_key = paramiko.Ed25519Key.from_private_key_file(key_path, password=password)
                except paramiko.ssh_exception.SSHException:
                    private_key = paramiko.RSAKey.from_private_key_file(key_path, password=password)
                self.client.connect(hostname, port, username, pkey=private_key, timeout=10)
            elif password:
                self.client.connect(hostname, port, username, password=password, timeout=10)
            else:
                raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø—É—Ç—å –∫ –∫–ª—é—á—É.")
        except Exception as e:
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {username}@{hostname}:{port}. –û—à–∏–±–∫–∞: {e}")

    def get_os_release_id(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç ID –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã —Å —Å–µ—Ä–≤–µ—Ä–∞."""
        stdin, stdout, stderr = self.client.exec_command("cat /etc/os-release | grep '^ID=' | cut -d'=' -f2")
        os_id = stdout.read().decode('utf-8').strip().replace('"', '')
        if not os_id:
            error = stderr.read().decode('utf-8')
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –û–°. –û—à–∏–±–∫–∞: {error or '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}")
        return os_id

    def execute_command(self, command, log_callback, use_sudo=False, sudo_password=None):
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É—è sudo.
        –ü–∞—Ä–æ–ª—å –¥–ª—è sudo –ø–µ—Ä–µ–¥–∞–µ—Ç—Å—è —è–≤–Ω–æ –∏ –Ω–∏–≥–¥–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è.
        """
        final_command = command
        if use_sudo:
            if not sudo_password:
                raise ValueError("–î–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã —Å sudo –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å.")
            final_command = f"sudo -S -p '' {command}"

        #log_callback(f"$ {final_command.replace(sudo_password, '********')}\n")
        stdin, stdout, stderr = self.client.exec_command(final_command, get_pty=True)

        if use_sudo:
            stdin.write(sudo_password + '\n')
            stdin.flush()

        for line in iter(stdout.readline, ""):
            log_callback(line)
        exit_status = stdout.channel.recv_exit_status()

        if exit_status != 0:
            error_output = "".join(stderr.readlines())
            if exit_status == 1 and 'incorrect password' in error_output:
                raise PermissionError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è sudo!")
            error_details = f"–ö–æ–º–∞–Ω–¥–∞ '{command}' –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {exit_status}."
            if error_output:
                error_details += f"\nSTDERR:\n{error_output}"
            raise ChildProcessError(error_details)

        log_callback(f"–£–°–ü–ï–•: –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {exit_status}\n")

    def close(self):
        if self.client:
            self.client.close()


# --- –ö–ª–∞—Å—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
class InstallerApp:
    def __init__(self, page: ft.Page):
        self.page = page
        self.page.title = "–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Amnezia Portmaster"
        self.page.vertical_alignment = ft.MainAxisAlignment.START
        self.page.window_width = 800
        self.page.window_height = 700
        self.ssh_client = None
        self.host_input = ft.TextField(label="IP-–∞–¥—Ä–µ—Å –∏–ª–∏ —Ö–æ—Å—Ç —Å–µ—Ä–≤–µ—Ä–∞", width=400)
        self.port_input = ft.TextField(label="–ü–æ—Ä—Ç SSH", value="22", width=150)
        self.user_input = ft.TextField(label="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value="root", width=400)
        self.auth_method = ft.RadioGroup(
            content=ft.Row([ft.Radio(value="password", label="–ü–∞—Ä–æ–ª—å"), ft.Radio(value="key", label="SSH-–∫–ª—é—á")]),
            value="password",
            on_change=self._on_auth_method_change
        )
        self.password_input = ft.TextField(label="–ü–∞—Ä–æ–ª—å", password=True, can_reveal_password=True, width=400)
        self.key_file_path = ft.TextField(label="–ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É SSH-–∫–ª—é—á—É", read_only=True, width=300)
        self.key_picker = ft.FilePicker(on_result=self._on_key_file_picked)
        self.page.overlay.append(self.key_picker)
        self.pick_key_button = ft.ElevatedButton("–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª", on_click=lambda _: self.key_picker.pick_files(
            dialog_title="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π SSH-–∫–ª—é—á", allowed_extensions=["pem", "key"]
        ))
        self.password_container = ft.Container(content=self.password_input, visible=True)
        self.key_container = ft.Container(content=ft.Row([self.key_file_path, self.pick_key_button]), visible=False)
        self.log_output_column = ft.Column(spacing=5, expand=True)
        self.log_container = ft.Column([
            ft.Row([
                ft.Text("2. –õ–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏", size=18, weight=ft.FontWeight.BOLD),
                ft.IconButton(icon=ft.Icons.COPY, tooltip="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å—å –ª–æ–≥", on_click=self._copy_log_to_clipboard)
            ]),
            ft.Container(
                content=ft.ListView([self.log_output_column], auto_scroll=True, expand=True),
                border=ft.border.all(1, ft.Colors.OUTLINE), border_radius=ft.border_radius.all(5),
                padding=10, expand=True,
            )
        ], expand=True)
        self.install_button = ft.ElevatedButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", icon=ft.Icons.ROCKET_LAUNCH, on_click=self._install_click)
        self.progress_ring = ft.ProgressRing(visible=False)
        self._build_layout()

    def _on_auth_method_change(self, e):
        is_password = self.auth_method.value == "password"
        self.password_container.visible = is_password
        self.key_container.visible = not is_password
        self.page.update()

    def _on_key_file_picked(self, e: ft.FilePickerResultEvent):
        if e.files:
            self.key_file_path.value = e.files[0].path
            self.page.update()

    def _copy_log_to_clipboard(self, e):
        full_log = "\n".join([control.value for control in self.log_output_column.controls])
        self.page.set_clipboard(full_log)
        self.page.snack_bar = ft.SnackBar(ft.Text("–õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω!"), duration=2000)
        self.page.snack_bar.open = True
        self.page.update()

    def _set_ui_locked(self, locked: bool):
        self.install_button.disabled = locked
        self.progress_ring.visible = locked
        for field in [self.host_input, self.port_input, self.user_input, self.password_input, self.key_file_path,
                      self.pick_key_button, self.auth_method]:
            field.disabled = locked
        self.page.update()

    def _log(self, message: str):
        cleaned_message = message.strip()
        if cleaned_message:
            self.log_output_column.controls.append(
                ft.Text(cleaned_message, font_family="Consolas", size=12, selectable=True))
            self.page.update()

    def _validate_inputs(self) -> bool:
        if not self.host_input.value:
            self._log("–û–®–ò–ë–ö–ê: IP-–∞–¥—Ä–µ—Å –∏–ª–∏ —Ö–æ—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return False
        if not self.port_input.value.isdigit():
            self._log("–û–®–ò–ë–ö–ê: –ü–æ—Ä—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return False
        if not self.user_input.value:
            self._log("–û–®–ò–ë–ö–ê: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.")
            return False
        if self.auth_method.value == 'password' and not self.password_input.value:
            self._log("–û–®–ò–ë–ö–ê: –ü–∞—Ä–æ–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º –ø—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –º–µ—Ç–æ–¥–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
            return False
        if self.auth_method.value == 'key' and not self.key_file_path.value:
            self._log("–û–®–ò–ë–ö–ê: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª —Å SSH-–∫–ª—é—á–æ–º.")
            return False
        return True

    def _install_click(self, e):
        self.log_output_column.controls.clear()
        if not self._validate_inputs():
            self.page.update()
            return
        self._log("–ù–∞—á–∏–Ω–∞—é —É—Å—Ç–∞–Ω–æ–≤–∫—É...")
        self._set_ui_locked(True)
        threading.Thread(target=self._run_installation_thread, daemon=True).start()

    def _run_installation_thread(self):
        try:
            self.ssh_client = SecureSSHClient()
            self._log(f"–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ {self.host_input.value}:{self.port_input.value}...")
            self.ssh_client.connect(
                hostname=self.host_input.value, port=int(self.port_input.value),
                username=self.user_input.value, password=self.password_input.value,
                key_filename=self.key_file_path.value if self.auth_method.value == "key" else None
            )
            self._log("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ!")
            self._perform_server_setup()
            self._run_docker_compose()
            self._apply_network_rules()
            self._log("\n\n--- –£–°–¢–ê–ù–û–í–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê! ---")
        except Exception as ex:
            self._log(f"\n\n--- –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –£–°–¢–ê–ù–û–í–ö–ò ---\n{type(ex).__name__}: {ex}")
        finally:
            if self.ssh_client:
                self.ssh_client.close()
            self._set_ui_locked(False)

    def _perform_server_setup(self):
        self._log("–û–ø—Ä–µ–¥–µ–ª—è—é –æ–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—É—é —Å–∏—Å—Ç–µ–º—É...")
        os_id = self.ssh_client.get_os_release_id()
        self._log(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: {os_id}")
        if os_id not in ["ubuntu", "debian"]:
            raise NotImplementedError(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –û–°: {os_id}. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
        setup_script_name = "setup_ubuntu.sh"
        self._log(f"–ö–ª–æ–Ω–∏—Ä—É—é —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –≤ ~/{REMOTE_PROJECT_DIR}...")
        self.ssh_client.execute_command(
            f"rm -rf  ~/{REMOTE_PROJECT_DIR} && git clone {GIT_REPO_URL}  ~/{REMOTE_PROJECT_DIR}",
            self._log, use_sudo=False
        )
        project_path = f"~/{REMOTE_PROJECT_DIR}"
        setup_script_path = f"{project_path}/installer/{setup_script_name}"
        self._log(f"–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é —Å–µ—Ä–≤–µ—Ä —Å –ø–æ–º–æ—â—å—é —Å–∫—Ä–∏–ø—Ç–∞ {setup_script_name}...")
        self.ssh_client.execute_command(f"chmod +x {setup_script_path}", self._log, use_sudo=False)
        self.ssh_client.execute_command(
            setup_script_path, self._log, use_sudo=True, sudo_password=self.password_input.value
        )
        self._log("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")

    def _run_docker_compose(self):
        use_sudo = self.user_input.value != "root"
        project_path = f"./{REMOTE_PROJECT_DIR}"
        self._log(f"–ó–∞–ø—É—Å–∫–∞—é docker compose –≤ {project_path}...")
        self.ssh_client.execute_command(
            f"cd {project_path} && docker compose up --build -d", self._log, use_sudo=use_sudo,
            sudo_password=self.password_input.value if use_sudo else None
        )

    def _apply_network_rules(self):
        project_path = f"./{REMOTE_PROJECT_DIR}"
        rules_script_path = f"{project_path}/apply_portmaster_net_rules.sh"
        self._log("–ü—Ä–∏–º–µ–Ω—è—é —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞...")
        self.ssh_client.execute_command(f"chmod +x {rules_script_path}", self._log, use_sudo=False)
        self.ssh_client.execute_command(
            rules_script_path, self._log, use_sudo=True, sudo_password=self.password_input.value
        )

    def _build_layout(self):
        self.page.add(
            ft.Column([
                ft.Text("1. –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", size=18, weight=ft.FontWeight.BOLD),
                self.host_input,
                ft.Row([self.port_input, self.user_input]),
                ft.Text("–ú–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:"),
                self.auth_method,
                self.password_container,
                self.key_container,
                ft.Divider(),
                ft.Row([self.install_button, self.progress_ring]),
                ft.Divider(),
                self.log_container
            ], expand=True, scroll=ft.ScrollMode.ADAPTIVE)
        )
        self.page.update()


# --- –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê ---
def main(page: ft.Page):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–æ–¥–∏—Ç "–ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ–±–µ–∑—å—è–Ω—É",
    –∏ —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –∑–∞–ø—É—Å–∫–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.
    """
    page.title = "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    page.update()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—Ä–∞–Ω–µ–µ, –Ω–æ –ø–æ–∫–∞–∑ ‚Äî –ø–æ–∑–∂–µ
    if is_path_critically_dangerous(REMOTE_PROJECT_DIR):
        show_monkey_with_grenade_dialog(page, REMOTE_PROJECT_DIR)
        return  # –ù–µ —Å–æ–∑–¥–∞—ë–º InstallerApp
    else:
        InstallerApp(page)


if __name__ == "__main__":
    ft.app(target=main)