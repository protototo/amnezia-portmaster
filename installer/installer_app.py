import re
import threading
import queue  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å
from typing import Callable

import flet as ft
import paramiko
import os

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
GIT_REPO_URL = "https://github.com/protototo/amnezia-portmaster.git"
REMOTE_PROJECT_DIR = "amnezia-portmaster"


# --- –£—Ç–∏–ª–∏—Ç—ã –∏ –¥–∏–∞–ª–æ–≥–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def is_path_critically_dangerous(path_str: str) -> bool:
    if not isinstance(path_str, str) or not path_str.strip(): return True
    path = path_str.strip()
    if path.startswith('/') or '..' in path.split('/') or path.startswith('./'): return True
    if not re.fullmatch(r'[a-zA-Z0-9_.-]+', path): return True
    if path in ('.', '..'): return True
    return False


def show_monkey_with_grenade_dialog(page: ft.Page, dangerous_path: str):
    def close_dialog(e):
        dialog.open = False
        page.update()
        page.window.destroy()

    dialog = ft.AlertDialog(modal=True,
                            title=ft.Row([ft.Text("üêíüí£", size=40), ft.Text(" –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!", size=20)]),
                            content=ft.Text(
                                f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è REMOTE_PROJECT_DIR = '{dangerous_path}' –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞.\n\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
                                size=14, text_align=ft.TextAlign.CENTER), actions=[
            ft.ElevatedButton("–ü–æ–Ω—è–ª", on_click=close_dialog, color=ft.Colors.WHITE, bgcolor=ft.Colors.RED_700)],
                            actions_alignment=ft.MainAxisAlignment.END)
    page.dialog = dialog
    dialog.open = True
    page.update()


# --- SSH-–∫–ª–∏–µ–Ω—Ç (–§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è) ---
class SecureSSHClient:
    def __init__(self):
        self.client = paramiko.SSHClient()
        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    def connect(self, hostname, port, username, password=None, key_filename=None, key_password=None):
        try:
            if key_filename:
                key_path = os.path.expanduser(key_filename)
                if not os.path.exists(key_path): raise FileNotFoundError(f"SSH-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {key_path}")
                try:
                    pkey = paramiko.Ed25519Key.from_private_key_file(key_path, password=key_password)
                except paramiko.ssh_exception.SSHException:
                    pkey = paramiko.RSAKey.from_private_key_file(key_path, password=key_password)
                self.client.connect(hostname, port, username, pkey=pkey, timeout=10)
            elif password:
                self.client.connect(hostname, port, username, password=password, timeout=10)
            else:
                raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø—É—Ç—å –∫ SSH-–∫–ª—é—á—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        except Exception as e:
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {username}@{hostname}:{port}: {e}")

    def get_os_release_id(self) -> str:
        stdin, stdout, stderr = self.client.exec_command("grep '^ID=' /etc/os-release | cut -d'=' -f2")
        os_id = stdout.read().decode().strip().strip('"')
        exit_status = stdout.channel.recv_exit_status()
        if exit_status != 0 or not os_id:
            err = stderr.read().decode().strip()
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å OS: {err or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        return os_id

    def execute_command(self, command: str, log_callback: Callable[[str], None],
                        sudo_password: str | None = None) -> str:
        log_callback(f"$ {command.replace(sudo_password or 'DUMMY_PASSWORD_REPLACE', '********')}")
        stdin, stdout, stderr = self.client.exec_command(command, get_pty=True)
        if sudo_password:
            stdin.write(sudo_password + '\n')
            stdin.flush()
        output_lines = []
        for line in iter(stdout.readline, ""): output_lines.append(line)
        exit_status = stdout.channel.recv_exit_status()
        full_stdout = "".join(output_lines)
        if exit_status != 0:
            full_stderr = "".join(stderr.readlines())
            error_details = f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {exit_status}.\n--- –ö–û–ú–ê–ù–î–ê ---\n{command}\n\n--- STDOUT ---\n{full_stdout}\n\n--- STDERR ---\n{full_stderr}"
            if 'incorrect password attempt' in full_stderr.lower(): raise PermissionError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è sudo!")
            raise ChildProcessError(error_details)
        return full_stdout

    def close(self):
        if self.client: self.client.close()


# --- –°–µ—Ä–≤–∏—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–û–ô –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î) ---
class InstallationService:
    def __init__(self, client: SecureSSHClient, user_data: dict, log_callback: Callable[[str], None],
                 request_sudo_password_func: Callable[[], None], sudo_password_queue: queue.Queue):
        self.client = client
        self.data = user_data
        self.log = log_callback
        self.request_sudo_password = request_sudo_password_func
        self.sudo_password_queue = sudo_password_queue
        self.initial_password = user_data.get('password')
        self.confirmed_sudo_password = None

    def _execute(self, command: str, use_sudo=False, working_dir: str | None = None):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, –ü–†–ê–í–ò–õ–¨–ù–û –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è `cd` –∏ `sudo`.
        """
        # --- –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–ë–û–†–ö–ò –ö–û–ú–ê–ù–î–´ ---

        command_to_run = command
        password_for_sudo = None

        if use_sudo:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø–∞—Ä–æ–ª—å
            if not self.confirmed_sudo_password:
                # –ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ (—á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–∏–∞–ª–æ–≥)
                self._obtain_sudo_password()

            password_for_sudo = self.confirmed_sudo_password
            command_to_run = f"sudo -S -p '' {command}"

        # `cd` –≤—Å–µ–≥–¥–∞ –∏–¥–µ—Ç –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ, –ø–µ—Ä–µ–¥ `sudo`
        if working_dir:
            command_to_run = f"cd {working_dir} && {command_to_run}"

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        return self.client.execute_command(command_to_run, self.log, sudo_password=password_for_sudo)

    def _obtain_sudo_password(self):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–∞—Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω.
        """
        # 1. –ü—Ä–æ–±—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ UI
        if self.initial_password:
            self.log("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è sudo...")
            # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç sudo
            test_command = "sudo -S -p '' ls /root"
            try:
                self.client.execute_command(test_command, self.log, sudo_password=self.initial_password)
                self.log("‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è sudo. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ.")
                self.confirmed_sudo_password = self.initial_password
                self.initial_password = None  # –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ–º –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
                return
            except (PermissionError, ChildProcessError):
                self.log("‚ùå –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è sudo.")
                self.initial_password = None  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª

        # 2. –ï—Å–ª–∏ –º—ã –∑–¥–µ—Å—å, –∑–Ω–∞—á–∏—Ç –ø–∞—Ä–æ–ª—å –Ω–µ –ø–æ–¥–æ—à–µ–ª –∏–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ. –°–ø—Ä–∞—à–∏–≤–∞–µ–º.
        self.log("–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–∞—Ä–æ–ª—å –¥–ª—è sudo —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        self.request_sudo_password()
        new_password = self.sudo_password_queue.get()

        if not new_password:
            raise ValueError("–ü–∞—Ä–æ–ª—å –¥–ª—è sudo –Ω–µ –±—ã–ª –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω. –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞.")

        # 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –ø–∞—Ä–æ–ª—å
        self.log("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å sudo...")
        test_command = "sudo -S -p '' ls /root"
        try:
            self.client.execute_command(test_command, self.log, sudo_password=new_password)
            self.log("‚úÖ –ü–∞—Ä–æ–ª—å sudo –ø—Ä–∏–Ω—è—Ç. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ.")
            self.confirmed_sudo_password = new_password
        except (PermissionError, ChildProcessError):
            self.log("‚ùå –í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å sudo. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")
            raise PermissionError("–í–≤–µ–¥–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è sudo. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É —Å–Ω–æ–≤–∞.")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã —Å–µ—Ä–≤–∏—Å–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    def run_installation(self):
        try:
            self.log("–≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            self._setup_server()
            self.log("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.\n")
            self.log("–≠—Ç–∞–ø 2: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
            self._deploy_docker()
            self.log("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã.\n")
            self.log("–≠—Ç–∞–ø 3: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª...")
            self._apply_network_rules()
            self.log("‚úÖ –°–µ—Ç–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.\n")
            self.log("üéâ --- –£–°–¢–ê–ù–û–í–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê --- üéâ")
        except Exception as e:
            self.log(f"\n--- ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ---\n{type(e).__name__}: {e}")

    def _setup_server(self):
        os_id = self.client.get_os_release_id()
        self.log(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: {os_id}")
        if os_id not in ("ubuntu", "debian"): raise NotImplementedError(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ {os_id} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        remote_path = f"~/{REMOTE_PROJECT_DIR}"
        self.log("–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        self._execute(f"rm -rf {remote_path} && git clone {GIT_REPO_URL} {remote_path}")
        self.log("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (setup_ubuntu.sh)...")
        setup_script_path = f"{remote_path}/installer/setup_ubuntu.sh"
        self._execute(f"chmod +x {setup_script_path}")
        # –ó–¥–µ—Å—å working_dir –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –ø—É—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
        self._execute(setup_script_path, use_sudo=True)

    def _deploy_docker(self):
        remote_path = f"~/{REMOTE_PROJECT_DIR}"
        use_sudo = self.data['user'] != 'root'
        self.log(f"–ó–∞–ø—É—Å–∫ docker compose... (Sudo: {'–î–∞' if use_sudo else '–ù–µ—Ç'})")
        self._execute("docker compose up --build -d", use_sudo=use_sudo, working_dir=remote_path)

    def _apply_network_rules(self):
        remote_path = f"~/{REMOTE_PROJECT_DIR}"
        use_sudo = self.data['user'] != 'root'
        script_path = "./apply_portmaster_net_rules.sh"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        self.log(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª... (Sudo: {'–î–∞' if use_sudo else '–ù–µ—Ç'})")
        self._execute(f"chmod +x {script_path}", working_dir=remote_path)
        self._execute(script_path, use_sudo=use_sudo, working_dir=remote_path)
# --- –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (UI, –ø–µ—Ä–µ–¥–∞–µ—Ç –ø–∞—Ä–æ–ª—å –≤ —Å–µ—Ä–≤–∏—Å) ---
class InstallerApp:
    # ... __init__ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ _installation_thread_entrypoint ...
    def __init__(self, page: ft.Page):
        self.page = page
        page.title = "–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Amnezia Portmaster"
        page.window_width = 800
        page.window_height = 700
        self.sudo_password_queue = queue.Queue(maxsize=1)
        self.sudo_password_input = ft.TextField(label="–ü–∞—Ä–æ–ª—å –¥–ª—è sudo", password=True, can_reveal_password=True,
                                                autofocus=True)
        self.host = ft.TextField(label="Host/IP", expand=True)
        self.port = ft.TextField(label="SSH Port", value="22", width=120)
        self.user = ft.TextField(label="User", value="root", expand=True)
        self.password = ft.TextField(label="–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", password=True, can_reveal_password=True, expand=True)
        self.key_path = ft.TextField(label="–ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É SSH –∫–ª—é—á—É", read_only=True, expand=True)
        self.key_password = ft.TextField(label="–ü–∞—Ä–æ–ª—å –æ—Ç SSH –∫–ª—é—á–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)", password=True,
                                         can_reveal_password=True)
        self.key_picker = ft.FilePicker(on_result=self._on_key_picked)
        page.overlay.append(self.key_picker)
        self.pick_btn = ft.ElevatedButton(
            "–í—ã–±—Ä–∞—Ç—å –∫–ª—é—á",
            icon=ft.Icons.FOLDER_OPEN,
            on_click=lambda _: self.key_picker.pick_files(dialog_title="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á"),
            style=ft.ButtonStyle(
                padding=ft.padding.symmetric(vertical=15, horizontal=15),
            )
        )
        self.log_output_column = ft.Column(spacing=5, expand=True, scroll=ft.ScrollMode.ADAPTIVE)
        self.install_btn = ft.ElevatedButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", icon=ft.Icons.ROCKET_LAUNCH, on_click=self._on_install,
                                             style=ft.ButtonStyle(padding=ft.padding.symmetric(vertical=20, horizontal=20),
            ))
        self.progress = ft.ProgressRing(visible=False)
        self.copy_log_btn = ft.IconButton(icon=ft.Icons.COPY, tooltip="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥",
                                          on_click=self._copy_log_to_clipboard)
        self._build_ui()

    def _on_key_picked(self, e: ft.FilePickerResultEvent):
        if e.files:
            self.key_path.value = e.files[0].path
            self.page.update()

    def _copy_log_to_clipboard(self, e):
        full_log = "\n".join([txt.value for txt in self.log_output_column.controls if isinstance(txt, ft.Text)])
        self.page.set_clipboard(full_log)
        self.page.snack_bar = ft.SnackBar(content=ft.Text("–õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!"), duration=2000)
        self.page.snack_bar.open = True
        self.page.update()

    def _log(self, msg: str):
        text = msg.strip()
        if text:
            self.log_output_column.controls.append(ft.Text(text, font_family="Consolas", size=12, selectable=True))
            self.page.update()

    def _lock_ui(self, lock: bool):
        for ctl in (self.install_btn, self.host, self.port, self.user, self.password, self.pick_btn, self.key_path,
                    self.key_password):
            ctl.disabled = lock
        self.progress.visible = lock
        self.copy_log_btn.disabled = lock
        self.page.update()

    def _validate_inputs(self) -> bool:
        if not self.host.value or not self.port.value.isdigit() or not self.user.value:
            self._log("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è Host/IP, Port –∏ User.")
            return False
        if not self.key_path.value and not self.password.value:
            self._log("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ SSH –∫–ª—é—á.")
            return False
        return True

    def _on_install(self, e):
        self.log_output_column.controls.clear()
        self.page.update()
        if not self._validate_inputs(): return
        self._lock_ui(True)
        threading.Thread(target=self._installation_thread_entrypoint, daemon=True).start()

    def _request_sudo_password_dialog(self):
        self.sudo_password_input.value = ""

        def close_dialog(e, password_provided: bool):
            password = self.sudo_password_input.value if password_provided else None
            self.sudo_password_queue.put(password)
            self.page.dialog.open = False
            self.page.update()

        dialog = ft.AlertDialog(modal=True, title=ft.Text("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–ª—è Sudo"), content=ft.Column(
            [ft.Text(f"–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥–æ—à–µ–ª –∏–ª–∏ –Ω–µ –±—ã–ª —É–∫–∞–∑–∞–Ω. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è sudo."),
             self.sudo_password_input]), actions=[ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: close_dialog(e, False)),
                                                  ft.FilledButton("OK", on_click=lambda e: close_dialog(e, True))])
        self.page.dialog = dialog
        dialog.open = True
        self.page.update()

    def _installation_thread_entrypoint(self):
        client = SecureSSHClient()
        try:
            self._log(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.user.value}@{self.host.value}:{self.port.value}...")
            client.connect(
                hostname=self.host.value.strip(), port=int(self.port.value.strip()),
                username=self.user.value.strip(),
                password=self.password.value if not self.key_path.value else None,
                key_filename=self.key_path.value or None,
                key_password=self.key_password.value or None
            )
            self._log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

            # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
            # –ü–µ—Ä–µ–¥–∞–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ UI –≤ —Å–µ—Ä–≤–∏—Å
            user_data = {
                'user': self.user.value.strip(),
                'password': self.password.value
            }

            service = InstallationService(
                client=client, user_data=user_data,
                log_callback=self._log,
                request_sudo_password_func=self._request_sudo_password_dialog,
                sudo_password_queue=self.sudo_password_queue
            )
            service.run_installation()
        except Exception as ex:
            self._log(f"\n--- ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ---\n{type(ex).__name__}: {ex}")
        finally:
            client.close()
            self._lock_ui(False)

    def _build_ui(self):
        self.page.add(ft.Column([
            ft.Text("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", size=18, weight=ft.FontWeight.BOLD),
            ft.Row([self.host, self.port]), ft.Row([self.user, self.password]),
            ft.Text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è)", weight=ft.FontWeight.BOLD),
            ft.Row([self.key_path]),
            ft.Row([self.key_password, self.pick_btn]),
            ft.Divider(height=5),
            ft.Row([self.install_btn, self.progress]),
            ft.Divider(height=5),
            ft.Row([ft.Text("–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", size=18, weight=ft.FontWeight.BOLD), self.copy_log_btn]),
            ft.Row([ft.Container(content=self.log_output_column, border=None, padding=10, expand=True)]),
        ], expand=True))
        self.page.update()


def main(page: ft.Page):
    if is_path_critically_dangerous(REMOTE_PROJECT_DIR):
        show_monkey_with_grenade_dialog(page, REMOTE_PROJECT_DIR)
    else:
        InstallerApp(page)


if __name__ == "__main__":
    ft.app(target=main)