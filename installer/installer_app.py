import pathlib
import pwd
import queue
import re
import threading
from typing import Callable, Container
import socket
import flet as ft
import paramiko
import os

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
GIT_REPO_URL = "https://github.com/protototo/amnezia-portmaster.git"
REMOTE_PROJECT_DIR = "amnezia-portmaster"
UFW_RULE_COMMENT = "Added-by-Amnezia-Portmaster-Installer"
CONTAINER_NAME = "portmaster"

# --- –£—Ç–∏–ª–∏—Ç—ã –∏ –¥–∏–∞–ª–æ–≥–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def is_path_critically_dangerous(path_str: str) -> bool:
    if not isinstance(path_str, str) or not path_str.strip(): return True
    path = path_str.strip()
    if path.startswith('/') or '..' in path.split('/') or path.startswith('./'): return True
    if not re.fullmatch(r'[a-zA-Z0-9_.-]+', path): return True
    if path in ('.', '..'): return True
    return False


def show_monkey_with_grenade_dialog(page: ft.Page, dangerous_path: str):
    def close_dialog(e):
        dialog.open = False
        page.update()
        page.window.destroy()

    dialog = ft.AlertDialog(modal=True,
                            title=ft.Row([ft.Text("üêíüí£", size=40), ft.Text(" –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê!", size=20)]),
                            content=ft.Text(
                                f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è REMOTE_PROJECT_DIR = '{dangerous_path}' –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–∞.\n\n–ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
                                size=14, text_align=ft.TextAlign.CENTER), actions=[
            ft.ElevatedButton("–ü–æ–Ω—è–ª", on_click=close_dialog, color=ft.Colors.WHITE, bgcolor=ft.Colors.RED_700)],
                            actions_alignment=ft.MainAxisAlignment.END)
    page.update()
    page.open(dialog)


# --- –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —É–º–Ω—ã—Ö –¥–µ—Ñ–æ–ª—Ç–æ–≤ ---
def get_current_username() -> str | None:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–º—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è Unix-—Å–∏—Å—Ç–µ–º (–≤–∫–ª—é—á–∞—è macOS).
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –Ω–µ –Ω–∞ Windows
    if os.name == 'posix':
        try:
            # –≠—Ç–æ —Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±, –∫–æ—Ç–æ—Ä—ã–π —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∞–∂–µ –∏–∑ IDE
            return pwd.getpwuid(os.getuid()).pw_name
        except KeyError:
            # –ö—Ä–∞–π–Ω–µ —Ä–µ–¥–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ UID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            return None
    return None


def find_default_ssh_key() -> str | None:
    """–ò—â–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π SSH –∫–ª—é—á (id_rsa –∏–ª–∏ id_ed25519) –≤ ~/.ssh/"""
    if os.name == 'posix':
        home_dir = pathlib.Path.home()
        ssh_dir = home_dir / ".ssh"

        # –°–ø–∏—Å–æ–∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∏–º–µ–Ω –∫–ª—é—á–µ–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        default_keys = ["id_ed25519", "id_rsa"]

        for key_name in default_keys:
            key_path = ssh_dir / key_name
            if key_path.is_file():
                return str(key_path)  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
    return None


# --- SSH-–∫–ª–∏–µ–Ω—Ç (–§–∏–Ω–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è) ---
class SecureSSHClient:
    def __init__(self):
        self.client = paramiko.SSHClient()
        self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())

    def connect(self, hostname, port, username, password=None, key_filename=None, key_password=None):
        try:
            if key_filename:
                key_path = os.path.expanduser(key_filename)
                if not os.path.exists(key_path): raise FileNotFoundError(f"SSH-–∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω: {key_path}")
                try:
                    pkey = paramiko.Ed25519Key.from_private_key_file(key_path, password=key_password)
                except paramiko.ssh_exception.SSHException:
                    pkey = paramiko.RSAKey.from_private_key_file(key_path, password=key_password)
                self.client.connect(hostname, port, username, pkey=pkey, timeout=10)
            elif password:
                self.client.connect(hostname, port, username, password=password, timeout=10)
            else:
                raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å –∏–ª–∏ –ø—É—Ç—å –∫ SSH-–∫–ª—é—á—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")
        except Exception as e:
            raise ConnectionError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ {username}@{hostname}:{port}: {e}")

    def get_os_release_id(self) -> str:
        stdin, stdout, stderr = self.client.exec_command("grep '^ID=' /etc/os-release | cut -d'=' -f2")
        os_id = stdout.read().decode().strip().strip('"')
        exit_status = stdout.channel.recv_exit_status()
        if exit_status != 0 or not os_id:
            err = stderr.read().decode().strip()
            raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å OS: {err or '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}")
        return os_id

    def execute_command(self, command: str, log_callback: Callable[[str], None],
                        sudo_password: str | None = None) -> str:
        log_callback(f"$ {command.replace(sudo_password or 'DUMMY_PASSWORD_REPLACE', '********')}")
        stdin, stdout, stderr = self.client.exec_command(command, get_pty=True)
        if sudo_password:
            stdin.write(sudo_password + '\n')
            stdin.flush()
        output_lines = []
        for line in iter(stdout.readline, ""): output_lines.append(line)
        exit_status = stdout.channel.recv_exit_status()
        full_stdout = "".join(output_lines)
        if exit_status != 0:
            full_stderr = "".join(stderr.readlines())
            error_details = f"–ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {exit_status}.\n--- –ö–û–ú–ê–ù–î–ê ---\n{command}\n\n--- STDOUT ---\n{full_stdout}\n\n--- STDERR ---\n{full_stderr}"
            if 'incorrect password attempt' in full_stderr.lower(): raise PermissionError("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è sudo!")
            raise ChildProcessError(error_details)
        return full_stdout

    def close(self):
        if self.client: self.client.close()


# --- –°–µ—Ä–≤–∏—Å —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (–° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –õ–û–ì–ò–ö–û–ô –í–´–ü–û–õ–ù–ï–ù–ò–Ø –ö–û–ú–ê–ù–î) ---
class InstallationService:
    def __init__(self, client: SecureSSHClient, user_data: dict, log_callback: Callable[[str], None],
                 request_confirmation_func: Callable[[], None], confirmation_queue: queue.Queue
                 ):
        self.client = client
        self.data = user_data
        self.log = log_callback
        self.request_confirmation = request_confirmation_func
        self.confirmation_queue = confirmation_queue
        self.initial_password = user_data.get('password')
        self.confirmed_sudo_password = None
        self.pm_port = user_data.get('pm_port')
        self.pm_range = user_data.get('pm_range')
        self.amn0_ip = None # –ë—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –≤–æ –≤—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏

    def _check_for_existing_installation(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä Portmaster."""
        self.log("–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫...")
        # `docker ps -a` –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –¥–∞–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ
        # `grep -q` —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ "—Ç–∏—Ö–æ–º" —Ä–µ–∂–∏–º–µ, –≤–æ–∑–≤—Ä–∞—â–∞—è —Ç–æ–ª—å–∫–æ –∫–æ–¥ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        command = f"docker ps -a --format '{{{{.Names}}}}' | grep -q '^{CONTAINER_NAME}$'"
        try:
            # sudo –∑–¥–µ—Å—å –Ω–µ –≤—Å–µ–≥–¥–∞ –Ω—É–∂–Ω–æ, –Ω–æ –ª—É—á—à–µ –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö–æ–≤–∞—Ç—å—Å—è, –µ—Å–ª–∏ docker –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —Ä—É—Ç–∞
            use_sudo = self.data['user'] != 'root'
            self._execute(command, use_sudo=use_sudo)
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º 0, –∑–Ω–∞—á–∏—Ç grep –Ω–∞—à–µ–ª –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
            self.log(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '{CONTAINER_NAME}'.")
            return True
        except ChildProcessError:
            self.log("‚úÖ –ü—Ä–µ–¥—ã–¥—É—â–∏—Ö —É—Å—Ç–∞–Ω–æ–≤–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return False

    def _execute(self, command: str, use_sudo=False, working_dir: str | None = None):
        """
        –°–æ–±–∏—Ä–∞–µ—Ç –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É, –ü–†–ê–í–ò–õ–¨–ù–û –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è `cd` –∏ `sudo`.
        """
        # --- –ü–†–û–°–¢–ê–Ø –ò –ù–ê–î–ï–ñ–ù–ê–Ø –õ–û–ì–ò–ö–ê –°–ë–û–†–ö–ò –ö–û–ú–ê–ù–î–´ ---

        command_to_run = command
        password_for_sudo = None

        if use_sudo:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –Ω–∞—Å –ø–∞—Ä–æ–ª—å
            if not self.confirmed_sudo_password:
                # –ï—Å–ª–∏ –Ω–µ—Ç, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ (—á–µ—Ä–µ–∑ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –¥–∏–∞–ª–æ–≥)
                self._obtain_sudo_password()

            password_for_sudo = self.confirmed_sudo_password
            command_to_run = f"sudo -S -p '' {command}"

        # `cd` –≤—Å–µ–≥–¥–∞ –∏–¥–µ—Ç –≤ —Å–∞–º–æ–º –Ω–∞—á–∞–ª–µ, –ø–µ—Ä–µ–¥ `sudo`
        if working_dir:
            command_to_run = f"cd {working_dir} && {command_to_run}"

        # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–æ–±—Ä–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É
        return self.client.execute_command(command_to_run, self.log, sudo_password=password_for_sudo)

    def _cleanup_ufw_rules(self):
        """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø—Ä–∞–≤–∏–ª–∞ UFW –ø–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—é –∏ —É–¥–∞–ª—è–µ—Ç –∏—Ö –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ."""
        self.log("–ü–æ–∏—Å–∫ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–∞–≤–∏–ª UFW...")

        try:
            # 1. –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ñ–∞–π—Ä–≤–æ–ª–∞
            status_output = self._execute("sudo ufw status numbered", use_sudo=True)

            rules_to_delete = []
            # 2. –ü–∞—Ä—Å–∏–º –≤—ã–≤–æ–¥ –≤ Python
            for line in status_output.splitlines():
                if UFW_RULE_COMMENT in line:
                    # –ò—â–µ–º –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª–∞ –≤ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–∫–∞—Ö
                    match = re.search(r"\[\s*(\d+)\s*\]", line)
                    if match:
                        rule_number = int(match.group(1))
                        rules_to_delete.append(rule_number)

            if not rules_to_delete:
                self.log("‚úÖ –ü—Ä–∞–≤–∏–ª UFW, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤—â–∏–∫–æ–º, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return

            # 3. –°–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–º–µ—Ä–∞ –≤ –û–ë–†–ê–¢–ù–û–ú –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
            rules_to_delete.sort(reverse=True)
            self.log(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–∞–≤–∏–ª–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: {rules_to_delete}")

            # 4. –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥–æ–µ –ø—Ä–∞–≤–∏–ª–æ –ø–æ –æ—á–µ—Ä–µ–¥–∏
            for num in rules_to_delete:
                self.log(f"–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª–∞ UFW –Ω–æ–º–µ—Ä {num}...")
                # --force –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ "y/n"
                self._execute(f"sudo ufw --force delete {num}", use_sudo=True)

            self.log("‚úÖ –°—Ç–∞—Ä—ã–µ –ø—Ä–∞–≤–∏–ª–∞ UFW —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")

        except ChildProcessError:
            self.log("‚ö†Ô∏è –ö–æ–º–∞–Ω–¥–∞ `ufw` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –ø—Ä–∞–≤–∏–ª.")
        except Exception as e:
            self.log(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–∞–≤–∏–ª UFW: {e}")

    def _cleanup_previous_installation(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∏ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ –µ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ UFW."""
        self.log("–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        use_sudo = self.data['user'] != 'root'

        # 1. –£–¥–∞–ª—è–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        self.log(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ '{CONTAINER_NAME}'...")
        cleanup_command = f"docker stop {CONTAINER_NAME} || true && docker rm {CONTAINER_NAME}"
        try:
            self._execute(cleanup_command, use_sudo=use_sudo)
        except ChildProcessError:
            # –ù–µ —Å—Ç—Ä–∞—à–Ω–æ, –µ—Å–ª–∏ —É–ø–∞–ª–æ, –≤–æ–∑–º–æ–∂–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ –Ω–µ –±—ã–ª–æ
            self.log(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '{CONTAINER_NAME}' (–≤–æ–∑–º–æ–∂–Ω–æ, –µ–≥–æ –Ω–µ –±—ã–ª–æ).")

        # 2. –í—ã–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ UFW
        self._cleanup_ufw_rules()


    def _ensure_port_is_open(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø–æ—Ä—Ç–∞ —Å –∫–ª–∏–µ–Ω—Ç–∞ –∏ –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –µ–≥–æ –≤ UFW –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."""
        self.log(f"\n–≠—Ç–∞–ø 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ {self.pm_port}...")

        # –®–∞–≥ 1: –ü–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å –∫–ª–∏–µ–Ω—Ç–∞
        self.log(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ {self.amn0_ip}:{self.pm_port}...")
        try:
            with socket.create_connection((self.amn0_ip, self.pm_port), timeout=5):
                self.log(f"‚úÖ –ü–æ—Ä—Ç {self.pm_port} —É–∂–µ –æ—Ç–∫—Ä—ã—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω!")
                return  # –í—Å–µ —Ö–æ—Ä–æ—à–æ, –≤—ã—Ö–æ–¥–∏–º
        except (socket.timeout, ConnectionRefusedError, OSError) as e:
            self.log(f"‚ö†Ô∏è –ü–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}. –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ —Ñ–∞–π—Ä–≤–æ–ª–∞...")

        # –®–∞–≥ 2: –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ UFW –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        try:
            ufw_status_output = self._execute("sudo ufw status", use_sudo=True)
            if "Status: inactive" in ufw_status_output:
                # –ï—Å–ª–∏ UFW –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω, –∞ –ø–æ—Ä—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–±–ª–µ–º–∞ –≤ –¥—Ä—É–≥–æ–º
                raise RuntimeError(
                    f"–ü–æ—Ä—Ç {self.pm_port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ UFW –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω. "
                    "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã: –æ—à–∏–±–∫–∞ –≤ Docker-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ, –¥—Ä—É–≥–∞—è —Å–µ—Ç–µ–≤–∞—è –ø—Ä–æ–±–ª–µ–º–∞."
                )
        except ChildProcessError:
            # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ ufw –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ñ–∞–π—Ä–≤–æ–ª–∞ –Ω–µ—Ç
            raise RuntimeError(f"–ü–æ—Ä—Ç {self.pm_port} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏ –∫–æ–º–∞–Ω–¥–∞ `ufw` –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.")

        # –®–∞–≥ 3: –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ—Ä—Ç
        self.log("UFW –∞–∫—Ç–∏–≤–µ–Ω. –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª–æ, —á—Ç–æ–±—ã —Ä–∞–∑—Ä–µ—à–∏—Ç—å —Ç—Ä–∞—Ñ–∏–∫...")
        self._execute(f"sudo ufw allow {self.pm_port}/tcp comment '{UFW_RULE_COMMENT}'", use_sudo=True)
        self.log(f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ –¥–ª—è –ø–æ—Ä—Ç–∞ {self.pm_port} –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ UFW.")

        # –®–∞–≥ 4: –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è - –≤—Ç–æ—Ä–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.log(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞ {self.amn0_ip}:{self.pm_port}...")
        try:
            with socket.create_connection((self.amn0_ip, self.pm_port), timeout=5):
                self.log(f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –ü–æ—Ä—Ç {self.pm_port} —Ç–µ–ø–µ—Ä—å –æ—Ç–∫—Ä—ã—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω.")
        except (socket.timeout, ConnectionRefusedError, OSError) as e:
            # –ï—Å–ª–∏ –∏ –ø–æ—Å–ª–µ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–æ—Ä—Ç–∞ –æ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫
            raise RuntimeError(
                f"–ü–æ—Ä—Ç {self.pm_port} –±—ã–ª –æ—Ç–∫—Ä—ã—Ç –≤ UFW, –Ω–æ –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {e}. "
                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ç–∏ –∏ Docker –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ."
            )


    def _obtain_sudo_password(self):
        """
        –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø–æ–ª—É—á–µ–Ω–∏—è –ø–∞—Ä–æ–ª—è.
        –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–∞—Ä–æ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω.
        """
        # 1. –ü—Ä–æ–±—É–µ–º –ø–∞—Ä–æ–ª—å –∏–∑ UI
        if self.initial_password:
            self.log("–¢—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è sudo...")
            # –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ—Å—Ç—É—é –∫–æ–º–∞–Ω–¥—É, –∫–æ—Ç–æ—Ä–∞—è —Ç—Ä–µ–±—É–µ—Ç sudo
            test_command = "sudo -S -p '' ls /root"
            try:
                self.client.execute_command(test_command, self.log, sudo_password=self.initial_password)
                self.log("‚úÖ –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è sudo. –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –µ–≥–æ.")
                self.confirmed_sudo_password = self.initial_password
                self.initial_password = None  # –ë–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ–º –µ–≥–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å
                return
            except (PermissionError, ChildProcessError):
                self.log("‚ùå –ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è sudo.")
                self.initial_password = None  # –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –æ–Ω –Ω–µ –ø–æ–¥–æ—à–µ–ª
                raise PermissionError("–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è sudo. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞.")

    def _get_amn0_ip(self) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç IP-–∞–¥—Ä–µ—Å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ amn0."""
        self.log("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ IP-–∞–¥—Ä–µ—Å–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ amn0...")
        # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è IPv4 –∞–¥—Ä–µ—Å–∞ –∏–∑ –≤—ã–≤–æ–¥–∞ `ip addr`
        command = "ip -4 addr show amn0 | grep -oP '(?<=inet\\s)\\d+(\\.\\d+){3}'"
        try:
            ip_address = self._execute(command).strip()
            if not ip_address:
                raise RuntimeError("–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å amn0 –Ω–∞–π–¥–µ–Ω, –Ω–æ IP-–∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω.")
            self.log(f"‚úÖ IP-–∞–¥—Ä–µ—Å amn0: {ip_address}")
            self.amn0_ip = ip_address
            return ip_address
        except ChildProcessError:
             raise RuntimeError("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å amn0. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ AmneziaVPN —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞.")

    def _configure_docker_compose(self):
        """–ó–∞–º–µ–Ω—è–µ—Ç –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã –≤ docker-compose.yml –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ UI."""
        ip = self._get_amn0_ip()

        compose_path = f"~/{REMOTE_PROJECT_DIR}/docker-compose.yaml"
        self.log(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–∞–π–ª–∞ {compose_path}...")

        # –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º sed —Å –æ–ø—Ü–∏–µ–π -e –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–º–µ–Ω –∑–∞ –æ–¥–∏–Ω –≤—ã–∑–æ–≤.
        # –≠—Ç–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–µ–µ, —á–µ–º –≤—ã–∑—ã–≤–∞—Ç—å sed —Ç—Ä–∏ —Ä–∞–∑–∞.
        sed_command = (
            f"sed -i "
            f"-e 's/^      - PORTMASTER_IP=.*/      - PORTMASTER_IP={ip}/' "
            f"-e 's/^      - PORTMASTER_PORT=.*/      - PORTMASTER_PORT={self.pm_port}/' "
            f"-e 's/^      - EXPOSED_PORT_RANGE=.*/      - EXPOSED_PORT_RANGE={self.pm_range}/' "
            f"{compose_path}"
        )

        # –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è —Ñ–∞–π–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –º—ã —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–∫–ª–æ–Ω–∏—Ä–æ–≤–∞–ª–∏, –Ω–µ —Ç—Ä–µ–±—É–µ—Ç sudo
        self._execute(sed_command)
        self.log("‚úÖ docker-compose.yml —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.")

    def run_uninstallation(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è Portmaster —Å —Å–µ—Ä–≤–µ—Ä–∞."""
        self.log("\n--- –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è ---")
        try:
            if not self._check_for_existing_installation():
                self.log("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Portmaster –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                self.log("‚úÖ --- –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω --- ‚úÖ")
                return

            self._cleanup_previous_installation()
            self.log("‚úÖ --- –ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω --- ‚úÖ")

        except Exception as e:
            self.log(f"\n--- ‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –£–î–ê–õ–ï–ù–ò–ò ---\n{type(e).__name__}: {e}")

    def run_installation(self):
        try:

            if self._check_for_existing_installation():
                self.request_confirmation()
                if not self.confirmation_queue.get():
                    self.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                    return
                self._cleanup_previous_installation()


            self.log("–≠—Ç–∞–ø 1: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
            self._setup_server()
            self.log("‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω.\n")

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —à–∞–≥ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ–¥ –¥–µ–ø–ª–æ–µ–º ---
            self.log("–≠—Ç–∞–ø 2: –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Portmaster...")
            self._configure_docker_compose()
            self.log("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.\n")

            self.log("–≠—Ç–∞–ø 3: –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...")
            self._deploy_docker()
            self.log("‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã.\n")

            self.log("–≠—Ç–∞–ø 4: –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª...")
            self._apply_network_rules()
            self.log("‚úÖ –°–µ—Ç–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã.\n")

            self._ensure_port_is_open()
            self.log("‚úÖ –°–µ—Ç–µ–≤–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫ —Å–µ—Ä–≤–∏—Å—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.\n")

            # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–∞–º–º–∞—Ä–∏ ---
            self.log("üéâ --- –£–°–¢–ê–ù–û–í–ö–ê –£–°–ü–ï–®–ù–û –ó–ê–í–ï–†–®–ï–ù–ê --- üéâ")
            self.log("\n--- –ò—Ç–æ–≥–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ ---")
            self.log(f"Portmaster –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: {self.amn0_ip}:{self.pm_port}")
            self.log(f"–î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–±—Ä–æ—Å–∞: {self.pm_range}")
            self.log("-------------------------\n")

        except Exception as e:
            self.log(f"\n--- ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ---\n{type(e).__name__}: {e}")

    def _setup_server(self):
        os_id = self.client.get_os_release_id()
        self.log(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –û–°: {os_id}")
        if os_id not in ("ubuntu", "debian"): raise NotImplementedError(f"–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞ {os_id} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
        remote_path = f"~/{REMOTE_PROJECT_DIR}"
        self.log("–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...")
        self._execute(f"rm -rf {remote_path} && git clone {GIT_REPO_URL} {remote_path}")
        self.log("–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (setup_ubuntu.sh)...")
        setup_script_path = f"{remote_path}/installer/setup_ubuntu.sh"
        self._execute(f"chmod +x {setup_script_path}")
        # –ó–¥–µ—Å—å working_dir –Ω–µ –Ω—É–∂–µ–Ω, —Ç.–∫. –ø—É—Ç—å –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
        self._execute(setup_script_path, use_sudo=True)

    def _deploy_docker(self):
        remote_path = f"~/{REMOTE_PROJECT_DIR}"
        use_sudo = self.data['user'] != 'root'
        self.log(f"–ó–∞–ø—É—Å–∫ docker compose... (Sudo: {'–î–∞' if use_sudo else '–ù–µ—Ç'})")
        self._execute("docker compose up --build -d", use_sudo=use_sudo, working_dir=remote_path)

    def _apply_network_rules(self):
        remote_path = f"~/{REMOTE_PROJECT_DIR}"
        use_sudo = self.data['user'] != 'root'
        script_path = "./apply_portmaster_net_rules.sh"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
        self.log(f"–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª... (Sudo: {'–î–∞' if use_sudo else '–ù–µ—Ç'})")
        self._execute(f"chmod +x {script_path}", working_dir=remote_path)
        self._execute(script_path, use_sudo=use_sudo, working_dir=remote_path)

    def run_fix_routes(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–µ—Ç–µ–≤—ã—Ö –ø—Ä–∞–≤–∏–ª."""
        self.log("\n--- –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ ---")
        try:
            # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π, –æ—Ç–ª–∞–∂–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥
            self._apply_network_rules()
            self.log("‚úÖ --- –ú–∞—Ä—à—Ä—É—Ç—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã --- ‚úÖ")
        except Exception as e:
            self.log(f"\n--- ‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ò ---\n{type(e).__name__}: {e}")


# --- –ì–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (UI) ---
class InstallerApp:
    # ... __init__ –∏ –¥—Ä—É–≥–∏–µ –º–µ—Ç–æ–¥—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–æ _installation_thread_entrypoint ...
    def __init__(self, page: ft.Page):
        self.page = page
        page.title = "–£—Å—Ç–∞–Ω–æ–≤—â–∏–∫ Amnezia Portmaster"
        self.confirmation_queue = queue.Queue(maxsize=1)

        default_user = get_current_username()
        default_key_path = find_default_ssh_key()

        self.host = ft.TextField(label="Host/IP", expand=True)
        self.port = ft.TextField(label="SSH Port", value="22", width=120)
        self.user = ft.TextField(label="User", value=default_user if default_user else "root", expand=True)
        self.password = ft.TextField(label="–ü–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", password=True, can_reveal_password=True, expand=True)
        self.key_path = ft.TextField(label="–ü—É—Ç—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É SSH –∫–ª—é—á—É", value=default_key_path, read_only=True, expand=True)
        self.key_password = ft.TextField(label="–ü–∞—Ä–æ–ª—å –æ—Ç SSH –∫–ª—é—á–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)", password=True,
                                         can_reveal_password=True)
        self.key_picker = ft.FilePicker(on_result=self._on_key_picked)
        page.overlay.append(self.key_picker)
        self.pick_btn = ft.ElevatedButton(
            "–í—ã–±—Ä–∞—Ç—å –∫–ª—é—á",
            icon=ft.Icons.FOLDER_OPEN,
            width=180,
            on_click=lambda _: self.key_picker.pick_files(dialog_title="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á",allow_multiple=False),
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=4),
                padding=ft.padding.symmetric(vertical=15, horizontal=15),
            )
        )
        self.log_output_column = ft.Column(spacing=5, expand=True, scroll=ft.ScrollMode.ADAPTIVE)
        self.install_btn = ft.ElevatedButton(
            "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å",
            icon=ft.Icons.ROCKET_LAUNCH,
            on_click=self._on_install,
            width=130,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=4),  # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                bgcolor=ft.Colors.GREEN_700,
                color=ft.Colors.WHITE,
            )
        )

        self.fix_btn = ft.ElevatedButton(
            "–ò—Å–ø—Ä–∞–≤–∏—Ç—å",
            icon=ft.Icons.HEALING,
            on_click=self._on_fix_routes,
            tooltip="–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Å–µ—Ç–µ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ, –µ—Å–ª–∏ –æ–Ω–∏ —Å–±—Ä–æ—Å–∏–ª–∏—Å—å –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –∏–ª–∏ —Ö–æ—Å—Ç–∞",
            width=130,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=4),  # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                bgcolor=ft.Colors.BLUE_700,
                color=ft.Colors.WHITE,
            )
        )

        self.delete_btn = ft.ElevatedButton(
            "–£–¥–∞–ª–∏—Ç—å",
            icon=ft.Icons.DELETE_FOREVER,
            width=130,
            on_click=self._on_delete,
            style=ft.ButtonStyle(
                shape=ft.RoundedRectangleBorder(radius=4),  # –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ
                bgcolor=ft.Colors.RED_700,
                color=ft.Colors.WHITE,
            )
        )

        self.progress = ft.ProgressRing(visible=False)
        self.copy_log_btn = ft.IconButton(
            icon=ft.Icons.COPY,
            tooltip="–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥",
            on_click=self._copy_log_to_clipboard,
            # –ó–∞–¥–∞–µ–º —Å—Ç–∏–ª—å, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã
            style=ft.ButtonStyle(
                padding=0  # –ù—É–ª–µ–≤—ã–µ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏
            ),
            icon_size=16 # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ —á—É—Ç—å —É–º–µ–Ω—å—à–∏—Ç—å –∏ —Å–∞–º—É –∏–∫–æ–Ω–∫—É
        )
        self.pm_service_port = ft.TextField(
            label="–ü–æ—Ä—Ç —Å–µ—Ä–≤–∏—Å–∞ Portmaster",
            value="5000",
            width=180
        )
        self.pm_pool_start = ft.TextField(label="–ù–∞—á–∞–ª–æ –ø—É–ª–∞", value="20000", expand=True)
        self.pm_pool_end = ft.TextField(label="–ö–æ–Ω–µ—Ü –ø—É–ª–∞", value="21000", expand=True)
        self.log_output_column = ft.Column(spacing=5, expand=True, scroll=ft.ScrollMode.ADAPTIVE)

        self._build_ui()

    def _request_cleanup_confirmation(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∏ –∂–¥–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        def close_dialog(e, confirmed: bool):
            self.confirmation_queue.put(confirmed)
            dialog.open = False
            self.page.update()

        dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞"),
            content=ft.Text(
                f"–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ —É–∂–µ –∑–∞–ø—É—â–µ–Ω –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∏–º–µ–Ω–µ–º '{CONTAINER_NAME}'.\n\n"
                "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –≠—Ç–æ –ø—Ä–∏–≤–µ–¥–µ—Ç –∫ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏ —É–¥–∞–ª–µ–Ω–∏—é —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∏ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –Ω–∏–º –ø—Ä–∞–≤–∏–ª —Ñ–∞–π—Ä–≤–æ–ª–∞."
            ),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: close_dialog(e, False)),
                ft.ElevatedButton("–î–∞, —É–¥–∞–ª–∏—Ç—å –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", on_click=lambda e: close_dialog(e, True), color=ft.Colors.WHITE, bgcolor=ft.Colors.RED),
            ],
            actions_alignment=ft.MainAxisAlignment.END,
        )
        self.page.update()
        self.page.open(dialog)

    def _on_key_picked(self, e: ft.FilePickerResultEvent):
        if e.files:
            self.key_path.value = e.files[0].path
            self.page.update()

    def _copy_log_to_clipboard(self, e):
        full_log = "\n".join([txt.value for txt in self.log_output_column.controls if isinstance(txt, ft.Text)])
        self.page.set_clipboard(full_log)
        self.page.snack_bar = ft.SnackBar(content=ft.Text("–õ–æ–≥ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!"), duration=2000)
        self.page.snack_bar.open = True
        self.page.update()

    def _log(self, msg: str):
        text = msg.strip()
        if text:
            self.log_output_column.controls.append(ft.Text(text, font_family="Consolas", size=12, selectable=True))
            self.page.update()

    def _lock_ui(self, lock: bool):
        # --- –î–û–ë–ê–í–õ–Ø–ï–ú –ù–û–í–£–Æ –ö–ù–û–ü–ö–£ –í –ë–õ–û–ö–ò–†–û–í–ö–£ ---
        for ctl in (self.install_btn, self.delete_btn, self.fix_btn, self.host, self.port,
                    self.user, self.password, self.pick_btn, self.key_path,
                    self.key_password, self.pm_service_port, self.pm_pool_start, self.pm_pool_end):
            ctl.disabled = lock
        self.progress.visible = lock
        self.copy_log_btn.disabled = lock
        self.page.update()

    def _on_fix_routes(self, e):
        self.log_output_column.controls.clear()
        self.page.update()
        # –î–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.host.value or not self.port.value.isdigit() or not self.user.value:
            self._log("‚ùå –û—à–∏–±–∫–∞: –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è Host/IP, Port –∏ User.")
            return
        if not self.key_path.value and not self.password.value:
            self._log("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏–ª–∏ –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
            return

        self._lock_ui(True)
        threading.Thread(target=self._fix_routes_thread_entrypoint, daemon=True).start()

    def _fix_routes_thread_entrypoint(self):
        client = SecureSSHClient()
        try:
            self._log(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.user.value}@{self.host.value}:{self.port.value}...")
            client.connect(
                hostname=self.host.value.strip(), port=int(self.port.value.strip()),
                username=self.user.value.strip(),
                password=self.password.value if not self.key_path.value else None,
                key_filename=self.key_path.value or None,
                key_password=self.key_password.value or None
            )
            self._log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

            user_data = {'user': self.user.value.strip(), 'password': self.password.value}

            # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –≤—ã–∑—ã–≤–∞–µ–º –ù–û–í–´–ô –º–µ—Ç–æ–¥
            service = InstallationService(client=client, user_data=user_data, log_callback=self._log,confirmation_queue=None, request_confirmation_func=None)
            service.run_fix_routes()

        except Exception as ex:
            self._log(f"\n--- ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ---\n{type(ex).__name__}: {ex}")
        finally:
            client.close()
            self._lock_ui(False)

    def _on_delete(self, e):
        self.log_output_column.controls.clear()
        self.page.update()
        # –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–º –Ω—É–∂–Ω—ã —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if not self.host.value or not self.port.value.isdigit() or not self.user.value:
            self._log("‚ùå –û—à–∏–±–∫–∞: –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è Host/IP, Port –∏ User.")
            return
        if not self.key_path.value and not self.password.value:
            self._log("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –∏–ª–∏ –∫–ª—é—á –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É.")
            return

        self._lock_ui(True)
        threading.Thread(target=self._uninstallation_thread_entrypoint, daemon=True).start()

    def _request_delete_confirmation(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç—Ä–æ–≥–∏–π –¥–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è."""
        def close_dialog(e, confirmed: bool):
            self.confirmation_queue.put(confirmed)
            self.page.dialog.open = False
            self.page.update()

        dialog = ft.AlertDialog(
            modal=True,
            title=ft.Text("‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É–¥–∞–ª–µ–Ω–∏–µ"),
            content=ft.Text(
                f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ù–ê–í–°–ï–ì–î–ê —É–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä '{CONTAINER_NAME}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–∏–º –ø—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞?\n\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ."
            ),
            actions=[
                ft.TextButton("–û—Ç–º–µ–Ω–∞", on_click=lambda e: close_dialog(e, False)),
                ft.ElevatedButton("–î–∞, —è —É–≤–µ—Ä–µ–Ω, —É–¥–∞–ª–∏—Ç—å", on_click=lambda e: close_dialog(e, True), color=ft.Colors.WHITE, bgcolor=ft.Colors.RED_900),
            ],
            actions_alignment=ft.MainAxisAlignment.END,
        )
        self.page.dialog = dialog
        self.page.update()
        self.page.open(dialog)

    def _uninstallation_thread_entrypoint(self):
        client = SecureSSHClient()
        try:
            # 1. –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ü–ï–†–ï–î –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
            self._log("–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ...")
            self._request_delete_confirmation()
            if not self.confirmation_queue.get():
                self._log("–û–ø–µ—Ä–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
                return

            # 2. –¢–µ–ø–µ—Ä—å –ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
            self._log(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.user.value}@{self.host.value}:{self.port.value}...")
            client.connect(
                hostname=self.host.value.strip(), port=int(self.port.value.strip()),
                username=self.user.value.strip(),
                password=self.password.value if not self.key_path.value else None,
                key_filename=self.key_path.value or None,
                key_password=self.key_password.value or None
            )
            self._log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

            user_data = {'user': self.user.value.strip(), 'password': self.password.value}

            # 3. –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å –∏ –≤—ã–∑—ã–≤–∞–µ–º –ù–û–í–´–ô –º–µ—Ç–æ–¥
            service = InstallationService(
                client=client, user_data=user_data, log_callback=self._log,
                request_confirmation_func=None, confirmation_queue=None
            )
            service.run_uninstallation()

        except Exception as ex:
            self._log(f"\n--- ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ---\n{type(ex).__name__}: {ex}")
        finally:
            client.close()
            self._lock_ui(False)

    def _validate_inputs(self) -> bool:
        if not self.host.value or not self.port.value.isdigit() or not self.user.value:
            self._log("‚ùå –û—à–∏–±–∫–∞: –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è Host/IP, Port –∏ User.")
            return False
        if not self.key_path.value and not self.password.value:
            self._log("‚ùå –û—à–∏–±–∫–∞: –£–∫–∞–∂–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ SSH –∫–ª—é—á.")
            return False
        if not all(p.value.isdigit() for p in [self.pm_service_port, self.pm_pool_start, self.pm_pool_end]):
            self._log("‚ùå –û—à–∏–±–∫–∞: –ü–æ—Ä—Ç—ã –∏ –¥–∏–∞–ø–∞–∑–æ–Ω –ø—É–ª–∞ Portmaster –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏.")
            return False
        if  int(self.pm_service_port.value) < 1081:
            self._log("‚ùå –û—à–∏–±–∫–∞: –ü–æ—Ä—Ç Portmaster –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ 1080.")
            return False
        if  int(self.pm_pool_start.value) >= int(self.pm_pool_end.value):
            self._log("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤")
            return False
        return True

    def _on_install(self, e):
        self.log_output_column.controls.clear()
        self.page.update()
        if not self._validate_inputs(): return
        self._lock_ui(True)
        threading.Thread(target=self._installation_thread_entrypoint, daemon=True).start()


    def _installation_thread_entrypoint(self):
        client = SecureSSHClient()
        try:
            self._log(f"–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {self.user.value}@{self.host.value}:{self.port.value}...")
            client.connect(
                hostname=self.host.value.strip(), port=int(self.port.value.strip()),
                username=self.user.value.strip(),
                password=self.password.value if not self.key_path.value else None,
                key_filename=self.key_path.value or None,
                key_password=self.key_password.value or None
            )
            self._log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")

            user_data = {
                'user': self.user.value.strip(),
                'password': self.password.value,
                'pm_port': self.pm_service_port.value,
                'pm_range': f"{self.pm_pool_start.value}-{self.pm_pool_end.value}"
            }

            service = InstallationService(
                client=client, user_data=user_data,
                log_callback=self._log,
                request_confirmation_func=self._request_cleanup_confirmation,
                confirmation_queue=self.confirmation_queue
            )
            service.run_installation()
        except Exception as ex:
            self._log(f"\n--- ‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê ---\n{type(ex).__name__}: {ex}")
        finally:
            client.close()
            self._lock_ui(False)

    def _build_ui(self):
        self.page.clean()
        self.page.add(
            ft.Row(
                controls=[
                    # --- –ö–û–õ–û–ù–ö–ê 1: –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∏ –∫–Ω–æ–ø–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ (—Å–ª–µ–≤–∞) ---
                    ft.Column(
                        width=250,
                        controls=[
                            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫, —á—Ç–æ–±—ã –æ–Ω–∏ –∑–∞–Ω–∏–º–∞–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
                            ft.Container(
                                content=ft.Column(
                                    controls=[
                                        ft.Row([ft.Icon(ft.Icons.INFO_OUTLINE, color=ft.Colors.BLUE_400, size=20),
                                                ft.Text("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ", weight=ft.FontWeight.BOLD)]),
                                        ft.Text("–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–∞—à–µ–º—É —Å–µ—Ä–≤–µ—Ä—É –ø–æ SSH.", size=13,
                                                color=ft.Colors.ON_SURFACE_VARIANT),
                                        ft.Divider(height=40),

                                        ft.Row([ft.Icon(ft.Icons.KEY, color=ft.Colors.AMBER_400, size=20),
                                                ft.Text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", weight=ft.FontWeight.BOLD)]),
                                        ft.Text(
                                            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å SSH-–∫–ª—é—á. –ï—Å–ª–∏ –∫–ª—é—á –Ω–µ –≤—ã–±—Ä–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –ø–∞—Ä–æ–ª—å.",
                                            size=13, color=ft.Colors.ON_SURFACE_VARIANT),
                                        ft.Divider(height=40),
                                        ft.Text(
                                            "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –ø—Ä–∞–≤–∞ root",
                                            size=13, color=ft.Colors.ON_SURFACE_VARIANT),
                                        ft.Divider(height=40),

                                        ft.Text(
                                            "–î–ª—è —Ä–∞–±–æ—Ç—ã —á–µ—Ä–µ–∑ sudo –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –ø–∞—Ä–æ–ª—å –¥–∞–∂–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –∫–ª—é—á—É",
                                            size=13, color=ft.Colors.ON_SURFACE_VARIANT),
                                        ft.Divider(height=40),

                                        ft.Row([ft.Icon(ft.Icons.SETTINGS_APPLICATIONS, color=ft.Colors.GREEN_400,
                                                        size=20), ft.Text("Portmaster", weight=ft.FontWeight.BOLD)]),
                                        ft.Text("–ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞ –∏ –ø—Ä–æ–±—Ä–æ—Å–∞ –ø–æ—Ä—Ç–æ–≤.", size=13,
                                                color=ft.Colors.ON_SURFACE_VARIANT),
                                        ft.Text(
                                            "–ü–æ—Ä—Ç—ã –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è –ø–æ–∑–∂–µ –∫–ª–∏–µ–Ω—Ç–æ–º –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞."
                                            ,
                                            size=13,
                                            color=ft.Colors.ON_SURFACE_VARIANT),
                                        ft.Text(
                                            "–ö–ª–∏–µ–Ω—Ç—ã –ø–æ–¥–∫–ª—é—á–∞—é—â–∏–µ—Å—è –∫ —Ä–∞–∑–Ω—ã–º VPN –ø—Ä–æ—Ç–æ–∫–æ–ª–∞–º –∏—Å–ø–æ–ª—å–∑—É—é—Ç –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ –ø—É–ª –ø–æ—Ä—Ç–æ–≤. 1000 –ø–æ—Ä—Ç–æ–≤ –æ–±—ã—á–Ω–æ —Ö–≤–∞—Ç–∞—Ç–µ—Ç. ",
                                            size=13,
                                            color=ft.Colors.ON_SURFACE_VARIANT),
                                        ft.Text(
                                            "Portmaster –±—É–¥–µ—Ç –∂–∏—Ç—å –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ä–∞–∑–æ—Ä–≤–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ VPN –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.",
                                            size=13,
                                            color=ft.Colors.ON_SURFACE_VARIANT),
                                    ],
                                    spacing=10
                                ),
                                expand=True,
                                padding=ft.padding.only(top=10, right=10)
                            )
                        ]
                    ),

                    # --- –ö–û–õ–û–ù–ö–ê 2: –ù–∞—Å—Ç—Ä–æ–π–∫–∏ (—Ü–µ–Ω—Ç—Ä) ---
                    ft.Column(
                        width=550,
                        spacing=10,
                        scroll=ft.ScrollMode.ADAPTIVE,
                        controls=[
                            ft.Card(
                                ft.Container(
                                    content=ft.Column( spacing=15,controls=[
                                        ft.Text("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è", weight=ft.FontWeight.BOLD, size=16),
                                        ft.Row([self.host, self.port]),
                                        self.user,
                                        self.password,
                                    ]),
                                    padding=20
                                )
                            ),
                            ft.Card(
                                ft.Container(
                                    content=ft.Column(spacing=15,controls=[
                                        ft.Text("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –∫–ª—é—á—É", weight=ft.FontWeight.BOLD, size=16),
                                        self.key_path,
                                        ft.Row([self.key_password, self.pick_btn]),
                                    ]),
                                    padding=20
                                )
                            ),
                            ft.Card(
                                ft.Container(
                                    content=ft.Column(spacing=15,controls=[
                                        ft.Text("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Portmaster", weight=ft.FontWeight.BOLD, size=16),
                                        self.pm_service_port,
                                        ft.Text("–î–∏–∞–ø–∞–∑–æ–Ω –ø–æ—Ä—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–±—Ä–æ—Å–∞:"),
                                        ft.Row(
                                            controls=[
                                                self.pm_pool_start,
                                                ft.Text("-", size=20),
                                                self.pm_pool_end
                                            ],
                                            alignment=ft.MainAxisAlignment.SPACE_BETWEEN
                                        )
                                    ]),
                                    padding=20
                                )
                            ),
                            # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≤ —Å–∞–º–æ–º –Ω–∏–∑—É
                            ft.Container(
                                content=ft.Row(
                                    controls=[
                                        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"
                                        ft.Container(
                                            content=self.install_btn,
                                            expand=True,  # –ó–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                                            height=60,  # –ó–∞–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                                            alignment=ft.alignment.center,
                                        ),
                                        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£–¥–∞–ª–∏—Ç—å"
                                        ft.Container(
                                            content=self.delete_btn,
                                            expand=True,  # –ó–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                                            height=60,  # –ó–∞–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                                            alignment=ft.alignment.center,
                                        ),
                                        ft.Container(
                                            content=self.fix_btn,
                                            expand=True,  # –ó–∞–Ω–∏–º–∞–µ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –º–µ—Å—Ç–æ (–ø—Ä–æ–ø–æ—Ä—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
                                            height=60,  # –ó–∞–¥–∞–µ–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤—ã—Å–æ—Ç—É –¥–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫
                                            alignment=ft.alignment.center,
                                        ),
                                        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                                        ft.Container(
                                            content=self.progress,
                                            width=60,  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —à–∏—Ä–∏–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –≤–ª–∏—è—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏
                                            height=60,
                                            alignment=ft.alignment.center,
                                        )
                                    ],
                                    spacing=10,
                                    vertical_alignment=ft.CrossAxisAlignment.CENTER
                                ),
                                alignment=ft.alignment.center,
                                padding=ft.padding.only(top=10, left=10, right=10, bottom=10),
                            )
                        ]
                    ),

                    ft.VerticalDivider(width=10),

                    # --- –ö–û–õ–û–ù–ö–ê 3: –õ–æ–≥ (—Å–ø—Ä–∞–≤–∞) ---
                    ft.Column(
                        expand=True,  # –≠—Ç–∞ –∫–æ–ª–æ–Ω–∫–∞ –∑–∞–π–º–µ—Ç –≤—Å–µ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –º–µ—Å—Ç–æ
                        horizontal_alignment=ft.CrossAxisAlignment.STRETCH,
                        controls=[
                            ft.Row(controls=[
                                ft.Text("–õ–æ–≥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", size=18, weight=ft.FontWeight.BOLD),
                                self.copy_log_btn
                            ],vertical_alignment=ft.CrossAxisAlignment.CENTER),
                            ft.Container(
                                content=self.log_output_column,
                                border=None,
                                padding=10,
                                width=300,
                                expand=True,  # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –ª–æ–≥–∞ —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å—é –≤—ã—Å–æ—Ç—É –∫–æ–ª–æ–Ω–∫–∏
                            )
                        ]
                    )
                ],
                expand=True,  # –ì–ª–∞–≤–Ω—ã–π Row —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ—Ç—Å—è –Ω–∞ –≤—Å—é –≤—ã—Å–æ—Ç—É –∏ —à–∏—Ä–∏–Ω—É –æ–∫–Ω–∞
                vertical_alignment=ft.CrossAxisAlignment.START
            )
        )
        self.page.update()


def main(page: ft.Page):
    page.window.width = 1200
    page.window.height = 850
    page.window.min_width = 1200
    page.window.min_height = 850
    if is_path_critically_dangerous(REMOTE_PROJECT_DIR):
        show_monkey_with_grenade_dialog(page, REMOTE_PROJECT_DIR)
    else:
        InstallerApp(page)


if __name__ == "__main__":
    ft.app(target=main)